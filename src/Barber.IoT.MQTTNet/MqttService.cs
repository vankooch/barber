namespace Barber.IoT.MQTTNet
{
    using System;
    using System.Collections.Generic;
    using System.Net.WebSockets;
    using System.Security.Authentication;
    using System.Threading.Tasks;
    using Barber.IoT.Authentication.Models;
    using Barber.IoT.MQTTNet.Configuration;
    using Barber.IoT.MQTTNet.Logging;
    using Microsoft.AspNetCore.Http;
    using Microsoft.Extensions.Logging;
    using MQTTnet;
    using MQTTnet.Adapter;
    using MQTTnet.AspNetCore;
    using MQTTnet.Implementations;
    using MQTTnet.Server;

    public class MqttService<TUser>
        where TUser : DeviceModel<string>
    {
        private readonly IDeviceHandlers<TUser> _deviceHandlers;
        private readonly ILogger<MqttServer> _logger;
        private readonly IMqttServerApplicationMessageInterceptor _mqttApplicationMessageInterceptor;
        private readonly MqttFactory _mqttFactory;
        private readonly IMqttServer _mqttServer;
        private readonly IMqttServerStorage _mqttServerStorage;
        private readonly IMqttServerSubscriptionInterceptor _mqttSubscriptionInterceptor;
        private readonly IMqttServerClientSubscribedTopicHandler _mqttClientSubscribedTopicHandler;
        private readonly IMqttServerClientUnsubscribedTopicHandler _mqttClientUnsubscribedTopicHandler;
        private readonly MqttSettingsModel _settings;
        private readonly MqttWebSocketServerAdapter _webSocketServerAdapter;

        public MqttService(
            MqttSettingsModel mqttSettings,
            IDeviceHandlers<TUser> deviceHandlers,
            IMqttServerClientSubscribedTopicHandler mqttClientSubscribedTopicHandler,
            IMqttServerClientUnsubscribedTopicHandler mqttClientUnsubscribedTopicHandler,
            IMqttServerSubscriptionInterceptor mqttSubscriptionInterceptor,
            IMqttServerApplicationMessageInterceptor mqttApplicationMessageInterceptor,
            IMqttServerStorage mqttServerStorage,
            ILogger<MqttServer> logger)
        {
            this._settings = mqttSettings ?? throw new ArgumentNullException(nameof(mqttSettings));
            this._logger = logger ?? throw new ArgumentNullException(nameof(logger));
            this._deviceHandlers = deviceHandlers ?? throw new ArgumentNullException(nameof(deviceHandlers));

            // It is important to avoid injecting the logger wrapper to ensure that no
            // unused log messages are generated by the MQTTnet library. Debug logging
            // has a huge performance impact.
            if (mqttSettings.EnableDebugLogging)
            {
                var mqttNetLogger = new MqttNetLoggerWrapper(this._logger);
                this._mqttFactory = new MqttFactory(mqttNetLogger);

                logger.LogWarning("Debug logging is enabled. Performance of MQTTnet Server is decreased!");
            }
            else
            {
                this._mqttFactory = new MqttFactory();
            }

            this._webSocketServerAdapter = new MqttWebSocketServerAdapter(this._mqttFactory.DefaultLogger.CreateChildLogger());
            var adapters = new List<IMqttServerAdapter>
            {
                new MqttTcpServerAdapter(this._mqttFactory.DefaultLogger.CreateChildLogger())
                {
                    TreatSocketOpeningErrorAsWarning = true, // Opening other ports than for HTTP is not allows in Azure App Services.
                },
                this._webSocketServerAdapter,
            };

            this._mqttServer = this._mqttFactory.CreateMqttServer(adapters);

            this._mqttSubscriptionInterceptor = mqttSubscriptionInterceptor ?? throw new ArgumentNullException(nameof(mqttSubscriptionInterceptor));
            this._mqttApplicationMessageInterceptor = mqttApplicationMessageInterceptor ?? throw new ArgumentNullException(nameof(mqttApplicationMessageInterceptor));
            this._mqttServerStorage = mqttServerStorage ?? throw new ArgumentNullException(nameof(mqttServerStorage));

            this._mqttClientSubscribedTopicHandler = mqttClientSubscribedTopicHandler ?? throw new ArgumentNullException(nameof(mqttClientSubscribedTopicHandler));
            this._mqttClientUnsubscribedTopicHandler = mqttClientUnsubscribedTopicHandler ?? throw new ArgumentNullException(nameof(mqttClientUnsubscribedTopicHandler));
        }

        public IMqttServer Server => this._mqttServer;

        public Task RunWebSocketConnectionAsync(WebSocket webSocket, HttpContext httpContext)
            => this._webSocketServerAdapter.RunWebSocketConnectionAsync(webSocket, httpContext);

        public void StartServer()
        {
            this._mqttServer.ClientConnectedHandler = this._deviceHandlers;
            this._mqttServer.ClientDisconnectedHandler = this._deviceHandlers;
            this._mqttServer.ClientSubscribedTopicHandler = this._mqttClientSubscribedTopicHandler;
            this._mqttServer.ClientUnsubscribedTopicHandler = this._mqttClientUnsubscribedTopicHandler;

            var settings = this.CreateMqttServerOptions();
            this._mqttServer.StartAsync(settings).GetAwaiter().GetResult();
        }

        private IMqttServerOptions CreateMqttServerOptions()
        {
            var options = new MqttServerOptionsBuilder()
                .WithMaxPendingMessagesPerClient(this._settings.MaxPendingMessagesPerClient)
                .WithDefaultCommunicationTimeout(TimeSpan.FromSeconds(this._settings.CommunicationTimeout))
                .WithConnectionValidator(this._deviceHandlers)
                .WithApplicationMessageInterceptor(this._mqttApplicationMessageInterceptor)
                .WithSubscriptionInterceptor(this._mqttSubscriptionInterceptor)
                .WithStorage(this._mqttServerStorage);

            // Configure unencrypted connections
            if (this._settings.TcpEndPoint.Enabled)
            {
                options.WithDefaultEndpoint();

                if (this._settings.TcpEndPoint.TryReadIPv4(out var address4))
                {
                    options.WithDefaultEndpointBoundIPAddress(address4);
                }

                if (this._settings.TcpEndPoint.TryReadIPv6(out var address6))
                {
                    options.WithDefaultEndpointBoundIPV6Address(address6);
                }

                if (this._settings.TcpEndPoint.Port > 0)
                {
                    options.WithDefaultEndpointPort(this._settings.TcpEndPoint.Port);
                }
            }
            else
            {
                options.WithoutDefaultEndpoint();
            }

            // Configure encrypted connections
            if (this._settings.EncryptedTcpEndPoint != null && this._settings.EncryptedTcpEndPoint.Enabled)
            {
                options
                    .WithEncryptedEndpoint()
                    .WithEncryptionSslProtocol(SslProtocols.Tls12);

                if (!string.IsNullOrEmpty(this._settings.EncryptedTcpEndPoint?.Certificate?.Path))
                {
                    IMqttServerCertificateCredentials? certificateCredentials = null;

                    if (!string.IsNullOrEmpty(this._settings.EncryptedTcpEndPoint?.Certificate?.Password))
                    {
                        certificateCredentials = new MqttServerCertificateCredentials
                        {
                            Password = this._settings?.EncryptedTcpEndPoint?.Certificate?.Password,
                        };
                    }

                    options.WithEncryptionCertificate(this._settings?.EncryptedTcpEndPoint?.Certificate?.ReadCertificate(), certificateCredentials);
                }

                if (this._settings!.EncryptedTcpEndPoint!.TryReadIPv4(out var address4))
                {
                    options.WithEncryptedEndpointBoundIPAddress(address4);
                }

                if (this._settings.EncryptedTcpEndPoint.TryReadIPv6(out var address6))
                {
                    options.WithEncryptedEndpointBoundIPV6Address(address6);
                }

                if (this._settings.EncryptedTcpEndPoint.Port > 0)
                {
                    options.WithEncryptedEndpointPort(this._settings.EncryptedTcpEndPoint.Port);
                }
            }
            else
            {
                options.WithoutEncryptedEndpoint();
            }

            if (this._settings.ConnectionBacklog > 0)
            {
                options.WithConnectionBacklog(this._settings.ConnectionBacklog);
            }

            if (this._settings.EnablePersistentSessions)
            {
                options.WithPersistentSessions();
            }

            return options.Build();
        }
    }
}
