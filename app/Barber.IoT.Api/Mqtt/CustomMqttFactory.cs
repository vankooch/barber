namespace Barber.IoT.Api.Mqtt
{
    using System;
    using System.Collections.Generic;
    using Barber.IoT.Api.Configuration;
    using Barber.IoT.Api.Logging;
    using Microsoft.Extensions.Logging;
    using MQTTnet;
    using MQTTnet.Adapter;
    using MQTTnet.Diagnostics;
    using MQTTnet.Server;

    public class CustomMqttFactory
    {
        private readonly MqttFactory _mqttFactory;

        public CustomMqttFactory(MqttSettingsModel settings, ILogger<MqttServer> logger)
        {
            _ = settings ?? throw new ArgumentNullException(nameof(settings));
            _ = logger ?? throw new ArgumentNullException(nameof(logger));

            // It is important to avoid injecting the logger wrapper to ensure that no
            // unused log messages are generated by the MQTTnet library. Debug logging
            // has a huge performance impact.
            if (settings.EnableDebugLogging)
            {
                var mqttNetLogger = new MqttNetLoggerWrapper(logger);
                this._mqttFactory = new MqttFactory(mqttNetLogger);

                logger.LogWarning("Debug logging is enabled. Performance of MQTTnet Server is decreased!");
            }
            else
            {
                this._mqttFactory = new MqttFactory();
            }

            this.Logger = this._mqttFactory.DefaultLogger;
        }

        public IMqttNetLogger Logger { get; }

        public IMqttServer CreateMqttServer(List<IMqttServerAdapter> adapters)
        {
            _ = adapters ?? throw new ArgumentNullException(nameof(adapters));

            return this._mqttFactory.CreateMqttServer(adapters);
        }
    }
}
