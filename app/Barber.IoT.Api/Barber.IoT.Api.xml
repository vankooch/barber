<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Barber.IoT.Api</name>
    </assembly>
    <members>
        <member name="T:Barber.IoT.Api.Controllers.Administration.DeviceActivityController">
            <summary>
            Device activity management controller
            </summary>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DeviceActivityController.#ctor(Barber.IoT.Authentication.IDeviceActivityManager{Barber.IoT.Data.Model.DeviceActivity})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DeviceActivityController.Get(System.String)">
            <summary>
            Get device activity history
            </summary>
            <param name="id">Device id</param>
            <returns></returns>
        </member>
        <member name="T:Barber.IoT.Api.Controllers.Administration.DeviceController">
            <summary>
            Device management controller
            </summary>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DeviceController.#ctor(Barber.IoT.Authentication.IDeviceManager{Barber.IoT.Data.Model.Device})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DeviceController.Delete(System.String)">
            <summary>
            Delete a device from data store
            </summary>
            <param name="id">Device id</param>
            <returns></returns>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DeviceController.GetById(System.String)">
            <summary>
            Get stored device information, by given device id
            </summary>
            <param name="id">Device id</param>
            <returns></returns>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DeviceController.GetByName(System.String)">
            <summary>
            Get stored device information, by given device name
            </summary>
            <param name="name">Device name</param>
            <returns></returns>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DeviceController.GetPage(System.Int32,System.Int32)">
            <summary>
            List all stored devices. This method has pagination support.
            </summary>
            <param name="take">Devices per page, maximum is 1000</param>
            <param name="skip">Devices to skip</param>
            <returns></returns>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DeviceController.Post(Barber.IoT.Api.Models.DeviceModel)">
            <summary>
            Create a new device
            </summary>
            <param name="value">New device data</param>
            <returns></returns>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DeviceController.Put(System.String,Barber.IoT.Api.Models.DeviceModel)">
            <summary>
            Update a given device
            </summary>
            <param name="id">Device id</param>
            <param name="value">Updated device data</param>
            <returns></returns>
        </member>
        <member name="T:Barber.IoT.Api.Controllers.Administration.DeviceLockoutController">
            <summary>
            Device lockout management controller
            </summary>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DeviceLockoutController.#ctor(Barber.IoT.Authentication.IDeviceManager{Barber.IoT.Data.Model.Device},Microsoft.Extensions.Options.IOptions{Barber.IoT.Authentication.Options.DeviceOptions})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DeviceLockoutController.GetState(System.String)">
            <summary>
            Get device lockout state
            </summary>
            <param name="id">Device id</param>
            <returns></returns>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DeviceLockoutController.SetBan(System.String,System.Boolean)">
            <summary>
            Ban given user for 99 Years
            </summary>
            <param name="id">Device id</param>
            <param name="state">Lockout state</param>
            <returns></returns>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DeviceLockoutController.SetState(System.String,System.Boolean)">
            <summary>
            Change lockout state for a given device
            </summary>
            <param name="id">Device id</param>
            <param name="state">Lockout state</param>
            <returns></returns>
        </member>
        <member name="T:Barber.IoT.Api.Controllers.Administration.DevicePasswordController">
            <summary>
            Device password management controller
            </summary>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DevicePasswordController.#ctor(Barber.IoT.Authentication.IDeviceManager{Barber.IoT.Data.Model.Device})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DevicePasswordController.Delete(System.String)">
            <summary>
            Delete password
            </summary>
            <param name="id">Device id</param>
            <returns></returns>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DevicePasswordController.GetState(System.String)">
            <summary>
            Check if device has set a password
            </summary>
            <param name="id">Device id</param>
            <returns></returns>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.Administration.DevicePasswordController.SetPassword(System.String,System.String)">
            <summary>
            Ban given user for 99 Years
            </summary>
            <param name="id">Device id</param>
            <param name="password">New password</param>
            <returns></returns>
        </member>
        <member name="T:Barber.IoT.Api.Controllers.ApiBaseController">
            <summary>
            Main API Base Controller
            </summary>
        </member>
        <member name="M:Barber.IoT.Api.Controllers.ApiBaseController.#ctor">
            <summary>
            Base Constructor
            </summary>
        </member>
        <member name="T:Barber.IoT.Api.Filters.GlobalExceptionFilterAttribute">
            <summary>
            Main Exception Handling on Request
            </summary>
        </member>
        <member name="M:Barber.IoT.Api.Filters.GlobalExceptionFilterAttribute.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Barber.IoT.Api.Filters.GlobalExceptionFilterAttribute.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Handle Exception
            </summary>
        </member>
        <member name="T:Barber.IoT.Api.Models.DeviceModel">
            <summary>
            Device information model
            </summary>
        </member>
        <member name="M:Barber.IoT.Api.Models.DeviceModel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Barber.IoT.Api.Models.DeviceModel.#ctor(Barber.IoT.Data.Model.Device)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Barber.IoT.Api.Models.DeviceModel.ConcurrencyStamp">
            <summary>
            A random value that must change whenever a user is persisted to the store
            </summary>
        </member>
        <member name="P:Barber.IoT.Api.Models.DeviceModel.Id">
            <summary>
            Gets or sets the primary key for this device.
            </summary>
        </member>
        <member name="P:Barber.IoT.Api.Models.DeviceModel.LockoutEnabled">
            <summary>
            Gets or sets a flag indicating if the device could be locked out.
            </summary>
            <value>True if the device could be locked out, otherwise false.</value>
        </member>
        <member name="P:Barber.IoT.Api.Models.DeviceModel.LockoutEnd">
            <summary>
            Gets or sets the date and time, in UTC, when any device lockout ends.
            </summary>
            <remarks>
            A value in the past means the device is not locked out.
            </remarks>
        </member>
        <member name="P:Barber.IoT.Api.Models.DeviceModel.Name">
            <summary>
            Device Name
            </summary>
        </member>
        <member name="T:Barber.IoT.Api.Swagger.TagGroupExtensions">
            <summary>
            Add vendor x-tagGroups
            </summary>
        </member>
        <member name="M:Barber.IoT.Api.Swagger.TagGroupExtensions.AddGroups(Microsoft.OpenApi.Models.OpenApiDocument,Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Add x-tagGroups
            </summary>
        </member>
        <member name="M:Barber.IoT.Api.Swagger.TagGroupExtensions.ContollerToTag(System.String)">
            <summary>
            Convert Controller name to Tag by removing the 'Controller' Part
            </summary>
            <param name="name">Name</param>
            <returns></returns>
        </member>
    </members>
</doc>
